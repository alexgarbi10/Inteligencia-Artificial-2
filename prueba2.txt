int i = 0;
bool a1 = false;
bool a2 = false;
bool a3 = false;
bool a4 = false;
bool a5 = false;
bool a6 = false;
bool a7 = false;
bool a8 = false;
bool a9 = false;
bool a10 = false;
bool a11 = false;
bool a12 = false;
bool a13 = false;
bool a14 = false;
bool a15 = false;
bool result = false;

while (i < (ATTRIBUTES + 1)) {
  if (i < ATTRIBUTES) {
    if (i == 0) {
      bool dontCare = true;

      for (int j=0; j < 2; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a1 = true;
      else {
        for (int j=0; j < 2; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a1 = true;
        }
      }

      if (!a1) i = ATTRIBUTES + 1;
    }

    // A2: Continuo
    if (i == 1) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a2 = true;
      else {
        for (int j=2; j < 5; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a2 = true;
        }
      }

      if (!a2) i = ATTRIBUTES + 1;
    }

    // A3: Continuo
    if (i == 2) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a3 = true;
      else {
        for (int j=5; j < 8; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a3 = true;
      }

      if (!a3) i = ATTRIBUTES + 1;
    }

    // A4: u, y, l, t
    if (i == 3) {
      bool dontCare = true;

      //for (int j=0; j < 4; j++) {
      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a4 = true;
      else {
//							for (int j=8; j < 12; j++) {
        for (int j=8; j < 11; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a4 = true;
        }
      }

      if (!a4) i = ATTRIBUTES + 1;
    }

    // A5: g, p, gg
    if (i == 4) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a5 = true;
      else {
//							for (int j=12; j < 15; j++) {
        for (int j=11; j < 14; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a5 = true;
        }
      }

      if (!a5) i = ATTRIBUTES + 1;
    }

    // A6: c, d, cc, i, j, k, m, r, q, w, x, e, aa, ff
    if (i == 5) {
      bool dontCare = true;

      for (int j=0; j < 14; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a6 = true;
      else {
        for (int j=14; j < 28; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a6 = true;
        }
      }

      if (!a6) i = ATTRIBUTES + 1;
    }

    // A7: v, h, bb, j, n, z, dd, ff, o
    if (i == 6) {
      bool dontCare = true;

      for (int j=0; j < 9; j++) {
      }

      if (dontCare) a7 = true;
      else {
        for (int j=28; j < 37; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a7 = true;
        }
      }

      if (!a7) i = ATTRIBUTES + 1;
    }

    // A8: Continuo
    if (i == 7) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a8 = true;
      else {
        for (int j=37; j < 40; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a8 = true;
        }
      }

      if (!a8) i = ATTRIBUTES + 1;
    }

    // A9: t, f
    if (i == 8) {
      bool dontCare = true;

      for (int j=0; j < 2; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a9 = true;
      else {
        for (int j=40; j < 42; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a9 = true;
        }
      }

      if (!a9) i = ATTRIBUTES + 1;
    }

    // A10: t, f
    if (i == 9) {
      bool dontCare = true;

      for (int j=0; j < 2; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a10 = true;
      else {
        for (int j=42; j < 44; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a10 = true;
        }
      }

      if (!a10) i = ATTRIBUTES + 1;
    }

    // A11: Continuo
    if (i == 10) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a11 = true;
      else {
        for (int j=44; j < 47; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a11 = true;
        }
      }

      if (!a11) i = ATTRIBUTES + 1;
    }

    // A12: t, f
    if (i == 11) {
      bool dontCare = true;

      for (int j=0; j < 2; j++) {
        if (individual.rule[j+genes] == 0) dontCare = false;
      }

      if (dontCare) a12 = true;
      else {
        for (int j=47; j < 49; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a12 = true;
        }
      }

      if (!a12) i = ATTRIBUTES + 1;
    }

    // A13: g, p, s
    if (i == 12) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a13 = true;
      else {
        for (int j=49; j < 52; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a13 = true;
        }
      }

      if (!a13) i = ATTRIBUTES + 1;
    }

    // A14: Continuo
    if (i == 13) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a14 = true;
      else {
        for (int j=52; j < 55; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a14 = true;
        }
      }

      if (!a14) i = ATTRIBUTES + 1;
    }

    // A15: Continuo
    if (i == 14) {
      bool dontCare = true;

      for (int j=0; j < 3; j++) {
        if (individual.rule[j+genes*GENE_SIZE] == 0) dontCare = false;
      }

      if (dontCare) a15 = true;
      else {
        for (int j=55; j < 58; j++) {
          if ((individual.rule[j+genes*GENE_SIZE] == 1) && (set[k].rule[j] == 1)) a15 = true;
        }
      }

      if (!a15) i = ATTRIBUTES + 1;
    }
  }
  else {
    if ((individual.rule[58+genes*GENE_SIZE] == 1) && (set[k].rule[58] == 1)) result = true;
    if ((individual.rule[58+genes*GENE_SIZE] == 0) && (set[k].rule[58] == 0)) result = true;
  }

  i++;
}

// Condicionales IF-THEN
correct = a1 && a2 && a3 && a4 && a5 && a6 && a7 && a8 && a9
    && a10 && a11 && a12 && a13 && a14 && a15 && result;

if (correct) {
  total++;

/*
  if (set.size() == 208) {
      cout << "Correcto, gen: " << genes << endl;
      cout << "Acumulado: " << total << endl;
  }
*/

  genes = size;
}
else genes++;
